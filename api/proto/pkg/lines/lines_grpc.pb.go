// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.3
// source: api/proto/lines.proto

package lines

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LinesServiceClient is the client API for LinesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LinesServiceClient interface {
	SubscribeOnSportLines(ctx context.Context, opts ...grpc.CallOption) (LinesService_SubscribeOnSportLinesClient, error)
}

type linesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLinesServiceClient(cc grpc.ClientConnInterface) LinesServiceClient {
	return &linesServiceClient{cc}
}

func (c *linesServiceClient) SubscribeOnSportLines(ctx context.Context, opts ...grpc.CallOption) (LinesService_SubscribeOnSportLinesClient, error) {
	stream, err := c.cc.NewStream(ctx, &LinesService_ServiceDesc.Streams[0], "/lines.LinesService/SubscribeOnSportLines", opts...)
	if err != nil {
		return nil, err
	}
	x := &linesServiceSubscribeOnSportLinesClient{stream}
	return x, nil
}

type LinesService_SubscribeOnSportLinesClient interface {
	Send(*SportLinesRequest) error
	Recv() (*SportLinesResponse, error)
	grpc.ClientStream
}

type linesServiceSubscribeOnSportLinesClient struct {
	grpc.ClientStream
}

func (x *linesServiceSubscribeOnSportLinesClient) Send(m *SportLinesRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *linesServiceSubscribeOnSportLinesClient) Recv() (*SportLinesResponse, error) {
	m := new(SportLinesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// LinesServiceServer is the server API for LinesService service.
// All implementations must embed UnimplementedLinesServiceServer
// for forward compatibility
type LinesServiceServer interface {
	SubscribeOnSportLines(LinesService_SubscribeOnSportLinesServer) error
	mustEmbedUnimplementedLinesServiceServer()
}

// UnimplementedLinesServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLinesServiceServer struct {
}

func (UnimplementedLinesServiceServer) SubscribeOnSportLines(LinesService_SubscribeOnSportLinesServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeOnSportLines not implemented")
}
func (UnimplementedLinesServiceServer) mustEmbedUnimplementedLinesServiceServer() {}

// UnsafeLinesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LinesServiceServer will
// result in compilation errors.
type UnsafeLinesServiceServer interface {
	mustEmbedUnimplementedLinesServiceServer()
}

func RegisterLinesServiceServer(s grpc.ServiceRegistrar, srv LinesServiceServer) {
	s.RegisterService(&LinesService_ServiceDesc, srv)
}

func _LinesService_SubscribeOnSportLines_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LinesServiceServer).SubscribeOnSportLines(&linesServiceSubscribeOnSportLinesServer{stream})
}

type LinesService_SubscribeOnSportLinesServer interface {
	Send(*SportLinesResponse) error
	Recv() (*SportLinesRequest, error)
	grpc.ServerStream
}

type linesServiceSubscribeOnSportLinesServer struct {
	grpc.ServerStream
}

func (x *linesServiceSubscribeOnSportLinesServer) Send(m *SportLinesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *linesServiceSubscribeOnSportLinesServer) Recv() (*SportLinesRequest, error) {
	m := new(SportLinesRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// LinesService_ServiceDesc is the grpc.ServiceDesc for LinesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LinesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lines.LinesService",
	HandlerType: (*LinesServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeOnSportLines",
			Handler:       _LinesService_SubscribeOnSportLines_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "api/proto/lines.proto",
}
